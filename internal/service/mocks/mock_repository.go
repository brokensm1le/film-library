// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/repository.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "film_library/internal/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddActorsByFilm mocks base method.
func (m *MockRepository) AddActorsByFilm(params *service.AddActorsByFilmParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActorsByFilm", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActorsByFilm indicates an expected call of AddActorsByFilm.
func (mr *MockRepositoryMockRecorder) AddActorsByFilm(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActorsByFilm", reflect.TypeOf((*MockRepository)(nil).AddActorsByFilm), params)
}

// AddFilmsByActor mocks base method.
func (m *MockRepository) AddFilmsByActor(params *service.AddFilmsByActorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilmsByActor", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilmsByActor indicates an expected call of AddFilmsByActor.
func (mr *MockRepositoryMockRecorder) AddFilmsByActor(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilmsByActor", reflect.TypeOf((*MockRepository)(nil).AddFilmsByActor), params)
}

// CreateActor mocks base method.
func (m *MockRepository) CreateActor(params *service.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockRepositoryMockRecorder) CreateActor(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockRepository)(nil).CreateActor), params)
}

// CreateFilm mocks base method.
func (m *MockRepository) CreateFilm(params *service.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockRepositoryMockRecorder) CreateFilm(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockRepository)(nil).CreateFilm), params)
}

// DeleteActor mocks base method.
func (m *MockRepository) DeleteActor(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockRepositoryMockRecorder) DeleteActor(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockRepository)(nil).DeleteActor), name)
}

// DeleteActorFilm mocks base method.
func (m *MockRepository) DeleteActorFilm(params *service.DeleteActorFilmParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorFilm", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorFilm indicates an expected call of DeleteActorFilm.
func (mr *MockRepositoryMockRecorder) DeleteActorFilm(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorFilm", reflect.TypeOf((*MockRepository)(nil).DeleteActorFilm), params)
}

// DeleteFilm mocks base method.
func (m *MockRepository) DeleteFilm(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockRepositoryMockRecorder) DeleteFilm(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockRepository)(nil).DeleteFilm), name)
}

// GetActor mocks base method.
func (m *MockRepository) GetActor(name string) (*service.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", name)
	ret0, _ := ret[0].(*service.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockRepositoryMockRecorder) GetActor(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockRepository)(nil).GetActor), name)
}

// GetActors mocks base method.
func (m *MockRepository) GetActors(params *service.DetailsParams) ([]service.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", params)
	ret0, _ := ret[0].([]service.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockRepositoryMockRecorder) GetActors(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockRepository)(nil).GetActors), params)
}

// GetFilm mocks base method.
func (m *MockRepository) GetFilm(name string) (*service.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", name)
	ret0, _ := ret[0].(*service.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockRepositoryMockRecorder) GetFilm(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockRepository)(nil).GetFilm), name)
}

// GetFilms mocks base method.
func (m *MockRepository) GetFilms(params *service.DetailsParams) ([]service.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", params)
	ret0, _ := ret[0].([]service.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockRepositoryMockRecorder) GetFilms(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockRepository)(nil).GetFilms), params)
}

// SearchActor mocks base method.
func (m *MockRepository) SearchActor(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchActor", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchActor indicates an expected call of SearchActor.
func (mr *MockRepositoryMockRecorder) SearchActor(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchActor", reflect.TypeOf((*MockRepository)(nil).SearchActor), pattern)
}

// SearchFilms mocks base method.
func (m *MockRepository) SearchFilms(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilms", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilms indicates an expected call of SearchFilms.
func (mr *MockRepositoryMockRecorder) SearchFilms(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilms", reflect.TypeOf((*MockRepository)(nil).SearchFilms), pattern)
}

// UpdateActor mocks base method.
func (m *MockRepository) UpdateActor(name string, params *service.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", name, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockRepositoryMockRecorder) UpdateActor(name, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockRepository)(nil).UpdateActor), name, params)
}

// UpdateFilm mocks base method.
func (m *MockRepository) UpdateFilm(name string, params *service.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", name, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockRepositoryMockRecorder) UpdateFilm(name, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockRepository)(nil).UpdateFilm), name, params)
}
